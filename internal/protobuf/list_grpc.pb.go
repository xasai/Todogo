// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServClient is the client API for TodoServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServClient interface {
	TodoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (TodoServ_TodoRequestClient, error)
}

type todoServClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServClient(cc grpc.ClientConnInterface) TodoServClient {
	return &todoServClient{cc}
}

func (c *todoServClient) TodoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (TodoServ_TodoRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoServ_ServiceDesc.Streams[0], "/todo.TodoServ/TodoRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServTodoRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoServ_TodoRequestClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type todoServTodoRequestClient struct {
	grpc.ClientStream
}

func (x *todoServTodoRequestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServServer is the server API for TodoServ service.
// All implementations must embed UnimplementedTodoServServer
// for forward compatibility
type TodoServServer interface {
	TodoRequest(*Request, TodoServ_TodoRequestServer) error
	mustEmbedUnimplementedTodoServServer()
}

// UnimplementedTodoServServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServServer struct {
}

func (UnimplementedTodoServServer) TodoRequest(*Request, TodoServ_TodoRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method TodoRequest not implemented")
}
func (UnimplementedTodoServServer) mustEmbedUnimplementedTodoServServer() {}

// UnsafeTodoServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServServer will
// result in compilation errors.
type UnsafeTodoServServer interface {
	mustEmbedUnimplementedTodoServServer()
}

func RegisterTodoServServer(s grpc.ServiceRegistrar, srv TodoServServer) {
	s.RegisterService(&TodoServ_ServiceDesc, srv)
}

func _TodoServ_TodoRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServServer).TodoRequest(m, &todoServTodoRequestServer{stream})
}

type TodoServ_TodoRequestServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type todoServTodoRequestServer struct {
	grpc.ServerStream
}

func (x *todoServTodoRequestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// TodoServ_ServiceDesc is the grpc.ServiceDesc for TodoServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoServ",
	HandlerType: (*TodoServServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TodoRequest",
			Handler:       _TodoServ_TodoRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/protobuf/list.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddTicketClient is the client API for AddTicket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddTicketClient interface {
	SendTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Response, error)
}

type addTicketClient struct {
	cc grpc.ClientConnInterface
}

func NewAddTicketClient(cc grpc.ClientConnInterface) AddTicketClient {
	return &addTicketClient{cc}
}

func (c *addTicketClient) SendTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/todo.AddTicket/SendTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddTicketServer is the server API for AddTicket service.
// All implementations must embed UnimplementedAddTicketServer
// for forward compatibility
type AddTicketServer interface {
	SendTicket(context.Context, *Ticket) (*Response, error)
	mustEmbedUnimplementedAddTicketServer()
}

// UnimplementedAddTicketServer must be embedded to have forward compatible implementations.
type UnimplementedAddTicketServer struct {
}

func (UnimplementedAddTicketServer) SendTicket(context.Context, *Ticket) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}
func (UnimplementedAddTicketServer) mustEmbedUnimplementedAddTicketServer() {}

// UnsafeAddTicketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddTicketServer will
// result in compilation errors.
type UnsafeAddTicketServer interface {
	mustEmbedUnimplementedAddTicketServer()
}

func RegisterAddTicketServer(s grpc.ServiceRegistrar, srv AddTicketServer) {
	s.RegisterService(&AddTicket_ServiceDesc, srv)
}

func _AddTicket_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddTicketServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.AddTicket/SendTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddTicketServer).SendTicket(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

// AddTicket_ServiceDesc is the grpc.ServiceDesc for AddTicket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddTicket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.AddTicket",
	HandlerType: (*AddTicketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTicket",
			Handler:    _AddTicket_SendTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protobuf/list.proto",
}
